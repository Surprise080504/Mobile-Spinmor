[{"E:\\React\\Mobile-Spinmor\\src\\index.js":"1","E:\\React\\Mobile-Spinmor\\src\\App\\AppTheme.js":"2","E:\\React\\Mobile-Spinmor\\src\\App\\Router\\PrivateRoute.js":"3","E:\\React\\Mobile-Spinmor\\src\\Screens\\Reviews.js":"4","E:\\React\\Mobile-Spinmor\\src\\Screens\\Orders.js":"5","E:\\React\\Mobile-Spinmor\\src\\Redux\\AppReducer\\App.act.js":"6","E:\\React\\Mobile-Spinmor\\src\\Redux\\AppReducer\\App.types.js":"7","E:\\React\\Mobile-Spinmor\\src\\Redux\\AppReducer\\App.red.js":"8","E:\\React\\Mobile-Spinmor\\src\\Redux\\ReportReducer\\Report.red.js":"9","E:\\React\\Mobile-Spinmor\\src\\Assets\\currencies.js":"10","E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\ByeBye.js":"11","E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\SandboxByeBye.js":"12","E:\\React\\Mobile-Spinmor\\src\\Components\\Basket\\CurrencyMenu.js":"13","E:\\React\\Mobile-Spinmor\\src\\Redux\\ReportReducer\\Report.types.js":"14","E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\AddCreditCard.js":"15","E:\\React\\Mobile-Spinmor\\src\\Hooks\\useDimensions.js":"16","E:\\React\\Mobile-Spinmor\\src\\Components\\Reviews\\ReviewsSummary.js":"17","E:\\React\\Mobile-Spinmor\\src\\App\\Router\\AppRouter.js":"18","E:\\React\\Mobile-Spinmor\\src\\Screens\\Login.js":"19","E:\\React\\Mobile-Spinmor\\src\\store.js":"20","E:\\React\\Mobile-Spinmor\\src\\Redux\\rootReducer.js":"21","E:\\React\\Mobile-Spinmor\\src\\Screens\\Payment.js":"22","E:\\React\\Mobile-Spinmor\\src\\api\\api.js":"23","E:\\React\\Mobile-Spinmor\\src\\Components\\Navigation\\AppBarNav.js":"24","E:\\React\\Mobile-Spinmor\\src\\Redux\\PaymentReducer\\Payment.red.js":"25","E:\\React\\Mobile-Spinmor\\src\\Assets\\consts.js":"26","E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\SelectCreditCard.js":"27","E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\SplitPayment.js":"28","E:\\React\\Mobile-Spinmor\\src\\Components\\Basket\\BasketSummaryLink.js":"29","E:\\React\\Mobile-Spinmor\\src\\Redux\\ScannerReducer\\Scanner.types.js":"30","E:\\React\\Mobile-Spinmor\\src\\Redux\\PaymentReducer\\Payment.types.js":"31","E:\\React\\Mobile-Spinmor\\src\\Components\\Basket\\BasketTable.js":"32","E:\\React\\Mobile-Spinmor\\src\\Screens\\Scanner.js":"33","E:\\React\\Mobile-Spinmor\\src\\Components\\Scanner\\ScannedItem.js":"34","E:\\React\\Mobile-Spinmor\\src\\Redux\\ScannerReducer\\Scanner.act.js":"35","E:\\React\\Mobile-Spinmor\\src\\Redux\\ScannerReducer\\Scanner.red.js":"36","E:\\React\\Mobile-Spinmor\\src\\Components\\Custom\\CButton.js":"37","E:\\React\\Mobile-Spinmor\\src\\App\\AppProvider.js":"38","E:\\React\\Mobile-Spinmor\\src\\App\\styles.js":"39","E:\\React\\Mobile-Spinmor\\src\\Redux\\BasketReducer\\Basket.act.js":"40","E:\\React\\Mobile-Spinmor\\src\\Redux\\BasketReducer\\Basket.red.js":"41","E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\ConfirmPayment.js":"42","E:\\React\\Mobile-Spinmor\\src\\Redux\\BasketReducer\\Basket.types.js":"43","E:\\React\\Mobile-Spinmor\\src\\Components\\Scanner\\GoodImage.js":"44","E:\\React\\Mobile-Spinmor\\src\\Redux\\PaymentReducer\\Payment.act.js":"45","E:\\React\\Mobile-Spinmor\\src\\Redux\\ReportReducer\\Report.act.js":"46"},{"size":498,"mtime":1634270224490,"results":"47","hashOfConfig":"48"},{"size":2153,"mtime":1634304591235,"results":"49","hashOfConfig":"48"},{"size":2188,"mtime":1634306857446,"results":"50","hashOfConfig":"48"},{"size":6373,"mtime":1622442824000,"results":"51","hashOfConfig":"48"},{"size":8422,"mtime":1622442824000,"results":"52","hashOfConfig":"48"},{"size":7951,"mtime":1634299121106,"results":"53","hashOfConfig":"48"},{"size":695,"mtime":1622442824000,"results":"54","hashOfConfig":"48"},{"size":4349,"mtime":1622442824000,"results":"55","hashOfConfig":"48"},{"size":1030,"mtime":1622442824000,"results":"56","hashOfConfig":"48"},{"size":4099,"mtime":1622442822000,"results":"57","hashOfConfig":"48"},{"size":7894,"mtime":1622442822000,"results":"58","hashOfConfig":"48"},{"size":7730,"mtime":1622442822000,"results":"59","hashOfConfig":"48"},{"size":3040,"mtime":1634288434203,"results":"60","hashOfConfig":"48"},{"size":218,"mtime":1622442824000,"results":"61","hashOfConfig":"48"},{"size":6150,"mtime":1622442822000,"results":"62","hashOfConfig":"48"},{"size":320,"mtime":1622442822000,"results":"63","hashOfConfig":"48"},{"size":5441,"mtime":1622442822000,"results":"64","hashOfConfig":"48"},{"size":3584,"mtime":1634270703439,"results":"65","hashOfConfig":"48"},{"size":5387,"mtime":1634305505153,"results":"66","hashOfConfig":"48"},{"size":433,"mtime":1634270150662,"results":"67","hashOfConfig":"48"},{"size":800,"mtime":1622442824000,"results":"68","hashOfConfig":"48"},{"size":4282,"mtime":1622442824000,"results":"69","hashOfConfig":"48"},{"size":401,"mtime":1622442824000,"results":"70","hashOfConfig":"48"},{"size":8653,"mtime":1634309893162,"results":"71","hashOfConfig":"48"},{"size":3912,"mtime":1622442824000,"results":"72","hashOfConfig":"48"},{"size":398,"mtime":1622442822000,"results":"73","hashOfConfig":"48"},{"size":8086,"mtime":1622442822000,"results":"74","hashOfConfig":"48"},{"size":13441,"mtime":1622442822000,"results":"75","hashOfConfig":"48"},{"size":1341,"mtime":1622442822000,"results":"76","hashOfConfig":"48"},{"size":791,"mtime":1634287010067,"results":"77","hashOfConfig":"48"},{"size":1028,"mtime":1622442824000,"results":"78","hashOfConfig":"48"},{"size":14132,"mtime":1622442822000,"results":"79","hashOfConfig":"48"},{"size":10868,"mtime":1634310151832,"results":"80","hashOfConfig":"48"},{"size":14425,"mtime":1634276924182,"results":"81","hashOfConfig":"48"},{"size":9271,"mtime":1634296905383,"results":"82","hashOfConfig":"48"},{"size":3077,"mtime":1634296703013,"results":"83","hashOfConfig":"48"},{"size":997,"mtime":1634303993848,"results":"84","hashOfConfig":"48"},{"size":474,"mtime":1634270253757,"results":"85","hashOfConfig":"48"},{"size":501,"mtime":1622442822000,"results":"86","hashOfConfig":"48"},{"size":9140,"mtime":1622442824000,"results":"87","hashOfConfig":"48"},{"size":4647,"mtime":1622442824000,"results":"88","hashOfConfig":"48"},{"size":6753,"mtime":1622442822000,"results":"89","hashOfConfig":"48"},{"size":950,"mtime":1622442824000,"results":"90","hashOfConfig":"48"},{"size":1226,"mtime":1622442822000,"results":"91","hashOfConfig":"48"},{"size":11391,"mtime":1622442824000,"results":"92","hashOfConfig":"48"},{"size":2557,"mtime":1622442824000,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"1eljy71",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"96"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"96"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"107"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"96"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"127"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"127"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"107"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\React\\Mobile-Spinmor\\src\\index.js",[],["200","201"],"E:\\React\\Mobile-Spinmor\\src\\App\\AppTheme.js",[],"E:\\React\\Mobile-Spinmor\\src\\App\\Router\\PrivateRoute.js",[],"E:\\React\\Mobile-Spinmor\\src\\Screens\\Reviews.js",["202","203"],"import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\n\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport ThumbUpOutlinedIcon from \"@material-ui/icons/ThumbUpOutlined\";\r\nimport ThumbDownOutlinedIcon from \"@material-ui/icons/ThumbDownOutlined\";\r\nimport ThumbsUpDownOutlinedIcon from \"@material-ui/icons/ThumbsUpDownOutlined\";\r\n\r\nimport { drawerWidth } from \"../Assets/consts\";\r\nimport { status } from \"../api/api\";\r\nimport {\r\n  getItemReviewsAction,\r\n  setGetItemReviewsStatus,\r\n} from \"../Redux/ScannerReducer/Scanner.act\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  content: {\r\n    flexGrow: 1,\r\n    // padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    // justifyContent: 'flex-end',\r\n  },\r\n\r\n  reviewsContainer: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  minMaxWidth: {\r\n    width: \"100%\",\r\n    maxWidth: theme.scannerWidth,\r\n  },\r\n\r\n  back: {\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  title: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  loader: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n\r\n  listItem: {\r\n    // marginTop: theme.spacing(2),\r\n  },\r\n  list: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  thumbsUp: {\r\n    color: theme.palette.info.dark,\r\n  },\r\n  thumbsUpDown: {\r\n    color: theme.palette.warning.main,\r\n  },\r\n  thumbsDown: {\r\n    color: theme.palette.error.dark,\r\n  },\r\n}));\r\n\r\nconst mapStateToProps = ({ AppReducer, ScannerReducer }) => ({\r\n  isMenuOpen: AppReducer.isMenuOpen,\r\n\r\n  qrItem: ScannerReducer.qrItem,\r\n  getItemReviewsStatus: ScannerReducer.getItemReviewsStatus,\r\n  itemReviews: ScannerReducer.itemReviews,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getItemReviewsAction: bindActionCreators(getItemReviewsAction, dispatch),\r\n  setGetItemReviewsStatus: bindActionCreators(\r\n    setGetItemReviewsStatus,\r\n    dispatch\r\n  ),\r\n});\r\n\r\nfunction Reviews({\r\n  isMenuOpen,\r\n\r\n  getItemReviewsStatus,\r\n  getItemReviewsAction,\r\n  qrItem,\r\n  itemReviews,\r\n  setGetItemReviewsStatus,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  const history = useHistory();\r\n  // const { itemId } = useParams();\r\n\r\n  React.useEffect(() => {\r\n    if (getItemReviewsStatus === status.not_started) {\r\n      getItemReviewsAction();\r\n    }\r\n  }, [getItemReviewsStatus, getItemReviewsAction]);\r\n\r\n  React.useEffect(() => {\r\n    return function cleanup() {\r\n      console.log(\"cleanup called\");\r\n      setGetItemReviewsStatus(status.not_started);\r\n    };\r\n  }, [setGetItemReviewsStatus]);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      className={clsx(\r\n        classes.content,\r\n        isMenuOpen && classes.contentShift,\r\n        classes.reviewsContainer\r\n      )}\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      alignContent=\"center\"\r\n    >\r\n      <div className={classes.drawerHeader} />\r\n\r\n      <Grid item className={clsx(classes.minMaxWidth, classes.back)}>\r\n        <Button\r\n          size=\"small\"\r\n          variant=\"outlined\"\r\n          onClick={() => history.goBack()}\r\n          startIcon={<ArrowBackIcon />}\r\n        >\r\n          back to scanner\r\n        </Button>\r\n      </Grid>\r\n\r\n      {getItemReviewsStatus.split(\" \")[0] === status.error && (\r\n        <Grid item className={clsx(classes.minMaxWidth, classes.title)}>\r\n          <Typography variant=\"h5\" align=\"left\">\r\n            There was an error getting item reviews:{\" \"}\r\n            {getItemReviewsStatus.split(\" \")[1]}\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n\r\n      {qrItem && (\r\n        <Grid item className={clsx(classes.minMaxWidth, classes.title)}>\r\n          <Typography variant=\"h4\" align=\"left\">\r\n            {qrItem.ItemName} reviews\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n\r\n      {getItemReviewsStatus === status.loading && (\r\n        <Grid item className={classes.loader}>\r\n          <CircularProgress />\r\n        </Grid>\r\n      )}\r\n\r\n      {/*(<Grid item className={classes.minMaxWidth}>\r\n        <Typography>Description of item can go here</Typography>\r\n        -----------\r\n      </Grid>)*/}\r\n\r\n      {getItemReviewsStatus === status.finish && (\r\n        <Grid item className={clsx(classes.minMaxWidth, classes.listItem)}>\r\n          <List className={classes.list}>\r\n            {itemReviews.map((review, index) => (\r\n              <ListItem key={index}>\r\n                <ListItemAvatar>\r\n                  <Avatar>\r\n                    {review.Likes === \"y\" && <ThumbUpOutlinedIcon />}\r\n                    {review.Indifferent === \"y\" && <ThumbsUpDownOutlinedIcon />}\r\n                    {review.DisLikes === \"y\" && <ThumbDownOutlinedIcon />}\r\n                  </Avatar>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                  primary={review.Comment || \"no comment\"}\r\n                  secondary={review.Date}\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Reviews);\r\n","E:\\React\\Mobile-Spinmor\\src\\Screens\\Orders.js",["204","205"],"import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\n\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport { drawerWidth } from \"../Assets/consts\";\r\nimport { exchangeFormat } from \"../Assets/currencies\";\r\nimport { status } from \"../api/api\";\r\nimport {\r\n  setMyOrdersStatus,\r\n  getMyOrdersAction,\r\n  setOrderDetailsStatus,\r\n  getOrderDetailsAction,\r\n} from \"../Redux/ReportReducer/Report.act\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  content: {\r\n    flexGrow: 1,\r\n    // padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    // justifyContent: 'flex-end',\r\n  },\r\n\r\n  OrdersContainer: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  minMaxWidth: {\r\n    width: \"100%\",\r\n    maxWidth: theme.scannerWidth,\r\n  },\r\n  title: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n\r\n  cardItem: {\r\n    marginBottom: theme.spacing(3),\r\n    minWidth: 280,\r\n    maxWidth: theme.scannerWidth,\r\n    padding: theme.spacing(1),\r\n    flexWrap: \"nowrap\",\r\n  },\r\n\r\n  itemLine: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst mapStateToProps = ({ AppReducer, ReportReducer }) => ({\r\n  isMenuOpen: AppReducer.isMenuOpen,\r\n\r\n  myOrders: ReportReducer.myOrders,\r\n  myOrdersStatus: ReportReducer.myOrdersStatus,\r\n\r\n  orderDetailsStatus: ReportReducer.orderDetailsStatus,\r\n  orderDetails: ReportReducer.orderDetails,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setMyOrdersStatus: bindActionCreators(setMyOrdersStatus, dispatch),\r\n  getMyOrdersAction: bindActionCreators(getMyOrdersAction, dispatch),\r\n\r\n  setOrderDetailsStatus: bindActionCreators(setOrderDetailsStatus, dispatch),\r\n  getOrderDetailsAction: bindActionCreators(getOrderDetailsAction, dispatch),\r\n});\r\n\r\nfunction Orders({\r\n  isMenuOpen,\r\n\r\n  myOrders,\r\n  getMyOrdersAction,\r\n  myOrdersStatus,\r\n  setMyOrdersStatus,\r\n\r\n  orderDetailsStatus,\r\n  orderDetails,\r\n  setOrderDetailsStatus,\r\n  getOrderDetailsAction,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  //\r\n  //cleanup on unmount\r\n  React.useEffect(() => {\r\n    setMyOrdersStatus(status.not_started);\r\n    setOrderDetailsStatus(status.not_started);\r\n  }, [setMyOrdersStatus, setOrderDetailsStatus]);\r\n\r\n  //\r\n  //\r\n  React.useEffect(() => {\r\n    if (myOrdersStatus === status.not_started) {\r\n      getMyOrdersAction();\r\n    }\r\n  }, [getMyOrdersAction, myOrdersStatus]);\r\n\r\n  //\r\n  //\r\n  const [expandedOrderId, setExpandedOrderId] = React.useState(-1);\r\n  const toggleOrderDetails = (orderId) => {\r\n    setExpandedOrderId(orderId === expandedOrderId ? -1 : orderId);\r\n  };\r\n  React.useEffect(() => {\r\n    if (expandedOrderId === -1) {\r\n      setOrderDetailsStatus(status.not_started);\r\n    } else {\r\n      getOrderDetailsAction(expandedOrderId);\r\n    }\r\n  }, [expandedOrderId, getOrderDetailsAction, setOrderDetailsStatus]);\r\n\r\n  //\r\n  //\r\n  return (\r\n    <Grid\r\n      container\r\n      className={clsx(\r\n        classes.content,\r\n        isMenuOpen && classes.contentShift,\r\n        classes.OrdersContainer\r\n      )}\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      alignContent=\"center\"\r\n    >\r\n      <div className={classes.drawerHeader} />\r\n\r\n      <Grid item className={clsx(classes.minMaxWidth, classes.title)}>\r\n        <Typography variant=\"h3\">You have {myOrders.length} orders</Typography>\r\n      </Grid>\r\n\r\n      {myOrders.map((order, index) => (\r\n        <Grid\r\n          key={index}\r\n          container\r\n          item\r\n          component={Card}\r\n          className={classes.cardItem}\r\n          direction=\"column\"\r\n        >\r\n          <Grid container item direction=\"row\" alignItems=\"center\" padding={2}>\r\n            <Grid item>\r\n              <Typography variant=\"h6\">\r\n                <b>\r\n                  <u>Order #{order.OrdersID}:</u>\r\n                </b>\r\n              </Typography>\r\n            </Grid>\r\n\r\n            {(!order.Status || order.Status?.trim?.() === \"Sandbox\") && (\r\n              <Grid item>\r\n                <Typography variant=\"subtitle1\">&nbsp;(Sandbox)</Typography>\r\n              </Grid>\r\n            )}\r\n\r\n            <div style={{ flexGrow: 1 }} />\r\n\r\n            <Grid item>\r\n              <IconButton onClick={() => toggleOrderDetails(order.OrdersID)}>\r\n                {order.OrdersID === expandedOrderId ? (\r\n                  <ExpandLess />\r\n                ) : (\r\n                  <ExpandMore />\r\n                )}\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Typography variant=\"caption\">\r\n              {new Date(order.Date).toDateString()}\r\n            </Typography>\r\n          </Grid>\r\n\r\n          <OrderDetails\r\n            order={order}\r\n            classes={classes}\r\n            expandedOrderId={expandedOrderId}\r\n            orderDetailsStatus={orderDetailsStatus}\r\n            orderDetails={orderDetails}\r\n          />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nfunction OrderDetails({\r\n  order,\r\n  classes,\r\n  expandedOrderId,\r\n  orderDetailsStatus,\r\n  orderDetails,\r\n}) {\r\n  return (\r\n    <Collapse in={order.OrdersID === expandedOrderId} timeout=\"auto\">\r\n      {orderDetailsStatus === status.loading && (\r\n        <Grid item>\r\n          <Skeleton />\r\n          <Skeleton />\r\n          <Skeleton />\r\n        </Grid>\r\n      )}\r\n\r\n      {orderDetailsStatus.split(\" \")[0] === status.error && (\r\n        <Grid item>\r\n          <Typography color=\"error\">\r\n            An error occurred: {orderDetailsStatus.split(\" \")[1]}\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n\r\n      {orderDetailsStatus === status.finish && (\r\n        <React.Fragment>\r\n          <Grid item className={classes.itemLine}>\r\n            <PricesLine order={order} />\r\n          </Grid>\r\n          {orderDetails.map((item, index) => (\r\n            <React.Fragment key={index}>\r\n              <Grid container direction=\"row\" item className={classes.itemLine}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\">\r\n                    <span style={{ fontSize: \"0.85rem\" }}>{item.Qty}x </span>\r\n                    <i>{item.Description}</i>\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container direction=\"row\" item>\r\n                <Grid item>\r\n                  <Typography variant=\"caption\">\r\n                    Unit price {item.Total?.toFixed?.(2)}\r\n                    {order.LocationCurrencySymobl} (tax {item.Tax?.toFixed?.(2)}\r\n                    )\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </React.Fragment>\r\n          ))}\r\n        </React.Fragment>\r\n      )}\r\n    </Collapse>\r\n  );\r\n}\r\n\r\nfunction PricesLine({ order }) {\r\n  return (\r\n    <Typography variant=\"body2\">\r\n      <b>\r\n        Total paid {order.TotalOrder?.toFixed?.(2)}\r\n        &nbsp;{order.LocationCurrencySymobl}\r\n      </b>\r\n      <span style={{ fontSize: \"0.7rem\" }}>\r\n        <br />\r\n        Prepaid: {order.PaidWithPrepaidCredit?.toFixed?.(2)}\r\n        <br />\r\n        Credit card: {order.PaidWithCreditCard?.toFixed?.(2)}. Transaction #\r\n        {order.CardTransactionID}\r\n      </span>\r\n    </Typography>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Orders);\r\n",["206","207"],"E:\\React\\Mobile-Spinmor\\src\\Redux\\AppReducer\\App.act.js",[],"E:\\React\\Mobile-Spinmor\\src\\Redux\\AppReducer\\App.types.js",[],"E:\\React\\Mobile-Spinmor\\src\\Redux\\AppReducer\\App.red.js",[],"E:\\React\\Mobile-Spinmor\\src\\Redux\\ReportReducer\\Report.red.js",[],"E:\\React\\Mobile-Spinmor\\src\\Assets\\currencies.js",[],"E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\ByeBye.js",[],"E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\SandboxByeBye.js",[],["208","209"],"E:\\React\\Mobile-Spinmor\\src\\Components\\Basket\\CurrencyMenu.js",["210"],"E:\\React\\Mobile-Spinmor\\src\\Redux\\ReportReducer\\Report.types.js",[],["211","212"],"E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\AddCreditCard.js",["213"],"import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { status } from \"../../api/api\";\r\nimport { setNewCardForm } from \"../../Redux/PaymentReducer/Payment.act\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  rootContainer: {\r\n    marginTop: theme.spacing(1),\r\n    marginLeft: 2,\r\n  },\r\n\r\n  selectStyle: {\r\n    width: 85,\r\n  },\r\n  cvcStyle: {\r\n    width: 101,\r\n  },\r\n}));\r\n\r\nconst mapStateToProps = ({ PaymentReducer }) => ({\r\n  newCardForm: PaymentReducer.newCardForm,\r\n\r\n  payCardStatus: PaymentReducer.payCardStatus,\r\n  processOrderStatus: PaymentReducer.processOrderStatus,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setNewCardForm: bindActionCreators(setNewCardForm, dispatch),\r\n});\r\n\r\nfunction AddCreditCard({\r\n  setNewCardForm,\r\n  newCardForm,\r\n\r\n  payCardStatus,\r\n  processOrderStatus,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  const yearOptions = React.useMemo(() => {\r\n    const years = [];\r\n\r\n    for (let i = 2021; i <= 2035; i++) {\r\n      years.push(i);\r\n    }\r\n    return years;\r\n  }, []);\r\n\r\n  //\r\n  //initialize year & month on mount\r\n  React.useEffect(() => {\r\n    setNewCardForm(\"Month\", 1);\r\n    setNewCardForm(\"Year\", yearOptions[0]);\r\n  }, [setNewCardForm, yearOptions]);\r\n\r\n  //\r\n  //\r\n  const onAnyChange = (e, fieldName) => {\r\n    let value = \"\";\r\n\r\n    if (fieldName === \"SaveCardDetails\") {\r\n      value = e.target.checked;\r\n    } else {\r\n      value = e.target.value;\r\n    }\r\n\r\n    setNewCardForm(fieldName, value);\r\n  };\r\n\r\n  return (\r\n    <form autoComplete=\"on\">\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        className={classes.rootContainer}\r\n        spacing={2}\r\n      >\r\n        <Grid item>\r\n          <TextField\r\n            variant=\"filled\"\r\n            label=\"Name on card\"\r\n            inputProps={{ autoComplete: \"cc-number\" }}\r\n            value={newCardForm.NameOnCard}\r\n            onChange={(e) => onAnyChange(e, \"NameOnCard\")}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <TextField\r\n            variant=\"filled\"\r\n            label=\"Card number\"\r\n            inputProps={{ autoComplete: \"cc-number\" }}\r\n            value={newCardForm.CardNumber}\r\n            onChange={(e) => onAnyChange(e, \"CardNumber\")}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid container item direction=\"row\" alignItems=\"center\" spacing={2}>\r\n          <Grid item>\r\n            <FormControl variant=\"filled\">\r\n              <InputLabel id=\"select-month-label\">Month</InputLabel>\r\n              <Select\r\n                labelId=\"select-month-label\"\r\n                id=\"select-month\"\r\n                label=\"Month\"\r\n                inputProps={{\r\n                  autoComplete: \"cc-exp-month\",\r\n                }}\r\n                className={classes.selectStyle}\r\n                value={newCardForm.Month}\r\n                onChange={(e) => onAnyChange(e, \"Month\")}\r\n              >\r\n                <MenuItem value={1}>01</MenuItem>\r\n                <MenuItem value={2}>02</MenuItem>\r\n                <MenuItem value={3}>03</MenuItem>\r\n                <MenuItem value={4}>04</MenuItem>\r\n                <MenuItem value={5}>05</MenuItem>\r\n                <MenuItem value={6}>06</MenuItem>\r\n                <MenuItem value={7}>07</MenuItem>\r\n                <MenuItem value={8}>08</MenuItem>\r\n                <MenuItem value={9}>09</MenuItem>\r\n                <MenuItem value={10}>10</MenuItem>\r\n                <MenuItem value={11}>11</MenuItem>\r\n                <MenuItem value={12}>12</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <FormControl variant=\"filled\">\r\n              <InputLabel id=\"select-year-label\">Year</InputLabel>\r\n              <Select\r\n                labelId=\"select-year-label\"\r\n                id=\"select-year\"\r\n                label=\"Year\"\r\n                inputProps={{\r\n                  autoComplete: \"cc-exp-year\",\r\n                }}\r\n                className={classes.selectStyle}\r\n                value={newCardForm.Year}\r\n                onChange={(e) => onAnyChange(e, \"Year\")}\r\n              >\r\n                {yearOptions.map((y) => (\r\n                  <MenuItem kay={y} value={y}>\r\n                    {y}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item className={classes.cvcStyle}>\r\n          <TextField\r\n            variant=\"filled\"\r\n            label=\"cvc\"\r\n            inputProps={{ autoComplete: \"cc-csc\" }}\r\n            value={newCardForm.CVC}\r\n            onChange={(e) => onAnyChange(e, \"CVC\")}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                color=\"primary\"\r\n                disabled={\r\n                  payCardStatus === status.loading ||\r\n                  processOrderStatus === status.loading\r\n                }\r\n                checked={newCardForm.SaveCardDetails}\r\n                onChange={(e) => onAnyChange(e, \"SaveCardDetails\")}\r\n              />\r\n            }\r\n            label={\r\n              <Typography variant=\"body2\">\r\n                Tokenize and store card details in highly secured PCI DSS\r\n                complaint database\r\n              </Typography>\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCreditCard);\r\n","E:\\React\\Mobile-Spinmor\\src\\Hooks\\useDimensions.js",["214"],"import React from \"react\";\r\n\r\nexport default function useDimensions() {\r\n  const ref = React.useRef();\r\n  const [dimensions, setDimensions] = React.useState({});\r\n\r\n  React.useLayoutEffect(() => {\r\n    setDimensions(ref.current.getBoundingClientRect().toJSON());\r\n  }, [ref.current]);\r\n\r\n  return [ref, dimensions];\r\n}\r\n","E:\\React\\Mobile-Spinmor\\src\\Components\\Reviews\\ReviewsSummary.js",["215"],"import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\n\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\n\r\nimport ThumbUpOutlinedIcon from \"@material-ui/icons/ThumbUpOutlined\";\r\nimport ThumbDownOutlinedIcon from \"@material-ui/icons/ThumbDownOutlined\";\r\nimport ThumbsUpDownOutlinedIcon from \"@material-ui/icons/ThumbsUpDownOutlined\";\r\n\r\nimport { getItemLikesAction } from \"../../Redux/ScannerReducer/Scanner.act\";\r\nimport { status } from \"../../api/api\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  reviewsContainer: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  likeButton: {\r\n    alignItems: \"flex-end\",\r\n    minWidth: theme.spacing(6.5),\r\n  },\r\n  thumbsUp: {\r\n    color: theme.palette.info.dark,\r\n    paddingRight: theme.spacing(0.5),\r\n  },\r\n  thumbsUpDown: {\r\n    color: theme.palette.warning.main,\r\n    paddingRight: theme.spacing(0.5),\r\n  },\r\n  thumbsDown: {\r\n    color: theme.palette.error.dark,\r\n    paddingRight: theme.spacing(0.5),\r\n  },\r\n  readReviewsGridItem: {\r\n    alignSelf: \"flex-end\",\r\n  },\r\n\r\n  loader: {\r\n    width: \"100%\",\r\n    maxWidth: theme.spacing(8 * 2),\r\n    marginTop: theme.spacing(3),\r\n  },\r\n\r\n  noReviewsItem: {\r\n    paddingTop: theme.spacing(2),\r\n  },\r\n  // noReviewsStyle: {\r\n  //   borderStyle: \"solid\",\r\n  //   borderWidth: 2,\r\n  //   borderRadius: 4,\r\n  //   borderColor: theme.palette.text.primary,\r\n  // },\r\n}));\r\n\r\nconst mapStateToProps = ({ ScannerReducer, BasketReducer }) => ({\r\n  itemId: ScannerReducer.qrItem.ItemListId,\r\n  getItemLikesStatus: ScannerReducer.getItemLikesStatus,\r\n  itemLikes: ScannerReducer.itemLikes,\r\n\r\n  addToBasketStatus: BasketReducer.addToBasketStatus,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getItemLikesAction: bindActionCreators(getItemLikesAction, dispatch),\r\n});\r\n\r\nfunction ReviewsSummary({\r\n  itemId,\r\n  getItemLikesStatus,\r\n  itemLikes,\r\n  getItemLikesAction,\r\n  addToBasketStatus,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  React.useEffect(() => {\r\n    if (getItemLikesStatus === status.not_started) {\r\n      getItemLikesAction();\r\n    }\r\n  }, [getItemLikesAction, getItemLikesStatus]);\r\n\r\n  const [noReviewsYet, setNoReviewsYet] = React.useState(false);\r\n  React.useEffect(() => {\r\n    if (\r\n      getItemLikesStatus &&\r\n      getItemLikesStatus.split(\" \")[0] === status.error\r\n    ) {\r\n      setNoReviewsYet(true);\r\n    } else if (getItemLikesStatus === status.finish && itemLikes.total === 0) {\r\n      setNoReviewsYet(true);\r\n    } else {\r\n      setNoReviewsYet(false);\r\n    }\r\n  }, [getItemLikesStatus, itemLikes]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {getItemLikesStatus === status.loading && (\r\n        <Grid item className={classes.loader}>\r\n          <LinearProgress />\r\n        </Grid>\r\n      )}\r\n\r\n      {noReviewsYet && (\r\n        <Grid item className={classes.noReviewsItem}>\r\n          <Typography\r\n            variant=\"body2\"\r\n            align=\"center\"\r\n            className={classes.noReviewsStyle}\r\n          >\r\n            No reviews yet\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n\r\n      {getItemLikesStatus === status.finish && itemLikes.total > 0 && (\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"row\"\r\n          justify=\"space-between\"\r\n          alignItems=\"center\"\r\n          alignContent=\"flex-start\"\r\n          className={classes.reviewsContainer}\r\n        >\r\n          <Grid\r\n            container\r\n            item\r\n            xs={7}\r\n            lg={5}\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Button size=\"small\" className={classes.likeButton}>\r\n                <ThumbUpOutlinedIcon className={classes.thumbsUp} />\r\n                <Typography variant=\"subtitle2\">{itemLikes.Likes}</Typography>\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size=\"small\" className={classes.likeButton}>\r\n                <ThumbsUpDownOutlinedIcon className={classes.thumbsUpDown} />\r\n                <Typography variant=\"subtitle2\">\r\n                  {itemLikes.Indifferent}\r\n                </Typography>\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button size=\"small\" className={classes.likeButton}>\r\n                <ThumbDownOutlinedIcon className={classes.thumbsDown} />\r\n                <Typography variant=\"subtitle2\">\r\n                  {itemLikes.DisLikes}\r\n                </Typography>\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item className={classes.readReviewsGridItem}>\r\n            <Button\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              disabled={addToBasketStatus === status.loading}\r\n              component={Link}\r\n              to=\"/reviews\"\r\n            >\r\n              read reviews\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReviewsSummary);\r\n","E:\\React\\Mobile-Spinmor\\src\\App\\Router\\AppRouter.js",[],"E:\\React\\Mobile-Spinmor\\src\\Screens\\Login.js",[],"E:\\React\\Mobile-Spinmor\\src\\store.js",[],"E:\\React\\Mobile-Spinmor\\src\\Redux\\rootReducer.js",[],"E:\\React\\Mobile-Spinmor\\src\\Screens\\Payment.js",["216","217"],"E:\\React\\Mobile-Spinmor\\src\\api\\api.js",[],"E:\\React\\Mobile-Spinmor\\src\\Components\\Navigation\\AppBarNav.js",["218","219"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Link, useLocation } from \"react-router-dom\";\r\n\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Box from '@material-ui/core/Box';\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { logout, setIsMenuOpen } from \"../../Redux/AppReducer/App.act\";\r\nimport { drawerWidth } from \"../../Assets/consts\";\r\nimport CurrencyMenu from \"../Basket/CurrencyMenu\";\r\nimport spinmorLogo from \"../../Assets/images/logo.jpeg\";\r\nimport basketIcon from \"../../Assets/icons/basket.gif\";\r\nimport rewardsIcon from \"../../Assets/icons/Rewards.gif\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"space-between\",\r\n  },\r\n\r\n  spinmorTitle: {\r\n    padding: theme.spacing(1),\r\n    boxSizing: \"border-box\",\r\n    // maxHeight: 56,\r\n    justifyContent: \"space-between\",\r\n  },\r\n\r\n  menuItemColor: {\r\n    color: \"black\",\r\n    paddingLeft: theme.spacing(1),\r\n    \"& .MuiListItemIcon-root\": {\r\n      color: \"black\",\r\n    },\r\n  },\r\n  menuActiveItemColor: {\r\n    color: theme.palette.primary.main,\r\n    paddingLeft: theme.spacing(1),\r\n    \"& .MuiListItemIcon-root\": {\r\n      color: theme.palette.primary.main,\r\n    },\r\n    \"& .MuiListItemText-primary\": {\r\n      fontWeight: 600,\r\n    },\r\n  },\r\n}));\r\n\r\nconst mapStateToProps = ({ AppReducer, ScannerReducer, BasketReducer }) => ({\r\n  isMenuOpen: AppReducer.isMenuOpen,\r\n  firstName: AppReducer.firstName,\r\n  direction: AppReducer.direction,\r\n  qrItem: ScannerReducer.qrItem,\r\n  basketItems: BasketReducer.basketItems,\r\n  basketDbData: BasketReducer.basketDbData\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  logout: bindActionCreators(logout, dispatch),\r\n  setIsMenuOpen: bindActionCreators(setIsMenuOpen, dispatch),\r\n});\r\nfunction AppBarNav({\r\n  isMenuOpen,\r\n  setIsMenuOpen,\r\n  logout,\r\n  firstName,\r\n  direction,\r\n  qrItem,\r\n  basketItems,\r\n  basketDbData\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  const location = useLocation();\r\n\r\n  const handleDrawerOpen = () => {\r\n    setIsMenuOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setIsMenuOpen(false);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    logout();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, isMenuOpen && classes.appBarShift)}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(classes.menuButton, isMenuOpen && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          {qrItem ? (<img loading=\"lazy\" src={rewardsIcon} width={40} height={40} />) : (<Typography variant=\"h6\" noWrap>\r\n            G'day {firstName}\r\n          </Typography>)}\r\n\r\n          {basketDbData.basketStatus === \"e\" && (<Box component=\"span\" m={1}>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", marginLeft: 30, color: \"#e60000\" }}>\r\n              <img loading=\"lazy\" src={basketIcon} width={30} height={30} />\r\n              <Typography style={{ fontWeight: 550 }} variant=\"h5\">{basketItems.length}</Typography>\r\n            </div>\r\n          </Box>)}\r\n          <div style={{ flexGrow: 1 }} />\r\n          <CurrencyMenu />\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        // anchor=\"left\"\r\n        open={isMenuOpen}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <img\r\n            src={spinmorLogo}\r\n            alt=\"logo\"\r\n            width={drawerWidth - 80}\r\n          // height={48}\r\n          />\r\n\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {direction === \"ltr\" ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n\r\n        <Divider />\r\n\r\n        <List>\r\n          <ListItem\r\n            button\r\n            component={Link}\r\n            to=\"/\"\r\n            className={\r\n              location.pathname === \"/\"\r\n                ? classes.menuActiveItemColor\r\n                : classes.menuItemColor\r\n            }\r\n            onClick={handleDrawerClose}\r\n          >\r\n            {/*<ListItemIcon>\r\n              <CameraAltIcon />\r\n            </ListItemIcon>*/}\r\n            <ListItemText primary=\"Scan QR\" />\r\n          </ListItem>\r\n\r\n          <ListItem\r\n            button\r\n            component={Link}\r\n            to=\"/basket\"\r\n            className={\r\n              location.pathname === \"/basket\"\r\n                ? classes.menuActiveItemColor\r\n                : classes.menuItemColor\r\n            }\r\n            onClick={handleDrawerClose}\r\n          >\r\n            {/*<ListItemIcon>\r\n              <ShoppingCartIcon />\r\n            </ListItemIcon>*/}\r\n            <ListItemText primary=\"Basket\" />\r\n          </ListItem>\r\n\r\n          <ListItem\r\n            button\r\n            component={Link}\r\n            to=\"/orders\"\r\n            className={\r\n              location.pathname === \"/orders\"\r\n                ? classes.menuActiveItemColor\r\n                : classes.menuItemColor\r\n            }\r\n            onClick={handleDrawerClose}\r\n          >\r\n            {/*<ListItemIcon>\r\n              <ListAltIcon />\r\n            </ListItemIcon>*/}\r\n            <ListItemText primary=\"Orders\" />\r\n          </ListItem>\r\n\r\n          {/*<ListItem\r\n            button\r\n            component={Link}\r\n            to=\"/profile\"\r\n            className={\r\n              location.pathname === \"/profile\"\r\n                ? classes.menuActiveItemColor\r\n                : classes.menuItemColor\r\n            }\r\n          >\r\n            <ListItemIcon>\r\n              <AccountCircleIcon />\r\n            </ListItemIcon>}\r\n            <ListItemText primary=\"Profile\" />\r\n          </ListItem>*/}\r\n        </List>\r\n\r\n        <Divider />\r\n        <List>\r\n          {/*<ListItem button className={classes.menuItemColor}>\r\n            <ListItemIcon>\r\n              <TranslateIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Change Language\" />\r\n          </ListItem>*/}\r\n\r\n          {/*<ListItem button className={classes.menuItemColor}>\r\n            <ListItemIcon>\r\n              <MailIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Contact Us\" />\r\n          </ListItem>*/}\r\n\r\n          <ListItem\r\n            button\r\n            onClick={handleLogout}\r\n            className={classes.menuItemColor}\r\n          >\r\n            {/*<ListItemIcon>\r\n              <ExitToAppIcon />\r\n            </ListItemIcon>*/}\r\n            <ListItemText primary=\"Sign Out\" />\r\n          </ListItem>\r\n        </List>\r\n      </Drawer>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nAppBarNav.propTypes = {\r\n  /**\r\n   * Injected by the documentation to work in an iframe.\r\n   * You won't need it on your project.\r\n   */\r\n  window: PropTypes.func,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppBarNav);\r\n","E:\\React\\Mobile-Spinmor\\src\\Redux\\PaymentReducer\\Payment.red.js",[],"E:\\React\\Mobile-Spinmor\\src\\Assets\\consts.js",[],"E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\SelectCreditCard.js",["220"],"import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\";\r\n\r\nimport AddCreditCard from \"./AddCreditCard\";\r\nimport { exchangeFormat } from \"../../Assets/currencies\";\r\nimport { status } from \"../../api/api\";\r\nimport {\r\n  setPaymentStage,\r\n  setGetCardsStatus,\r\n  getCardsAction,\r\n  setSelectedCard,\r\n  payCardAction,\r\n  processOrderAction,\r\n  basketConfirmationAction,\r\n  sendOrderEmailAction,\r\n} from \"../../Redux/PaymentReducer/Payment.act\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  minMaxWidth: {\r\n    width: \"100%\",\r\n    maxWidth: theme.scannerWidth,\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(4),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n\r\n  cardItem: {\r\n    marginBottom: theme.spacing(2),\r\n    minWidth: 280,\r\n    maxWidth: 450,\r\n    padding: theme.spacing(1),\r\n    flexWrap: \"nowrap\",\r\n  },\r\n  radioContainer: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  actionContainer: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(2),\r\n    minWidth: 280,\r\n    maxWidth: 450,\r\n  },\r\n}));\r\n\r\nconst mapStateToProps = ({ AppReducer, BasketReducer, PaymentReducer }) => ({\r\n  currency: AppReducer.currency,\r\n  basketCurrency: BasketReducer.basketCurrency,\r\n\r\n  paymentStage: PaymentReducer.paymentStage,\r\n\r\n  getCardsStatus: PaymentReducer.getCardsStatus,\r\n  cards: PaymentReducer.cards,\r\n\r\n  selectedCard: PaymentReducer.selectedCard,\r\n\r\n  payCardStatus: PaymentReducer.payCardStatus,\r\n  processOrderStatus: PaymentReducer.processOrderStatus,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setPaymentStage: bindActionCreators(setPaymentStage, dispatch),\r\n\r\n  setGetCardsStatus: bindActionCreators(setGetCardsStatus, dispatch),\r\n  getCardsAction: bindActionCreators(getCardsAction, dispatch),\r\n\r\n  setSelectedCard: bindActionCreators(setSelectedCard, dispatch),\r\n\r\n  payCardAction: bindActionCreators(payCardAction, dispatch),\r\n  processOrderAction: bindActionCreators(processOrderAction, dispatch),\r\n\r\n  basketConfirmationAction: bindActionCreators(\r\n    basketConfirmationAction,\r\n    dispatch\r\n  ),\r\n  sendOrderEmailAction: bindActionCreators(sendOrderEmailAction, dispatch),\r\n});\r\n\r\nfunction SelectCreditCard({\r\n  currency,\r\n  basketCurrency,\r\n\r\n  paymentStage,\r\n  setPaymentStage,\r\n\r\n  setGetCardsStatus,\r\n  getCardsAction,\r\n  getCardsStatus,\r\n  cards,\r\n\r\n  setSelectedCard,\r\n  selectedCard,\r\n\r\n  payCardStatus,\r\n  processOrderStatus,\r\n\r\n  payCardAction,\r\n  processOrderAction,\r\n\r\n  basketConfirmationAction,\r\n  sendOrderEmailAction,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  //\r\n  //cleanup on unmount\r\n  React.useEffect(() => {\r\n    setGetCardsStatus(status.not_started);\r\n  }, [setGetCardsStatus]);\r\n\r\n  //\r\n  //\r\n  React.useEffect(() => {\r\n    if (getCardsStatus === status.not_started) {\r\n      getCardsAction();\r\n    }\r\n  }, [getCardsAction, getCardsStatus]);\r\n\r\n  //\r\n  //\r\n  const onSelectCard = (Last4digits) => {\r\n    setSelectedCard(Last4digits);\r\n  };\r\n\r\n  //\r\n  //\r\n  const onCharge = () => {\r\n    payCardAction();\r\n  };\r\n  React.useEffect(() => {\r\n    if (payCardStatus === status.finish) {\r\n      processOrderAction();\r\n    }\r\n  }, [payCardStatus, processOrderAction]);\r\n\r\n  //\r\n  //send SMS & email confirmation (no indication about status of the calls) + go to next step\r\n  React.useEffect(() => {\r\n    if (processOrderStatus === status.finish) {\r\n      basketConfirmationAction();\r\n      sendOrderEmailAction();\r\n      setPaymentStage(paymentStage + 1);\r\n    }\r\n  }, [\r\n    basketConfirmationAction,\r\n    paymentStage,\r\n    processOrderStatus,\r\n    sendOrderEmailAction,\r\n    setPaymentStage,\r\n  ]);\r\n\r\n  //\r\n  //\r\n  const onBack = () => {\r\n    setPaymentStage(paymentStage - 1);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid item className={clsx(classes.minMaxWidth, classes.instructions)}>\r\n        <Typography variant=\"h5\">\r\n          Please select a credit card or add a new one\r\n        </Typography>\r\n      </Grid>\r\n\r\n      {cards.map((card, index) => (\r\n        <Grid\r\n          key={index}\r\n          container\r\n          item\r\n          component={Card}\r\n          className={classes.cardItem}\r\n          direction=\"row\"\r\n          justify=\"space-between\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Grid item className={classes.radioContainer}>\r\n            <Radio\r\n              value={card.Last4digits}\r\n              inputProps={{ \"aria-label\": `card ${card.Last4digits}` }}\r\n              checked={selectedCard === card.Last4digits}\r\n              onChange={() => onSelectCard(card.Last4digits)}\r\n              color=\"primary\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid container item direction=\"column\" alignItems=\"flex-start\">\r\n            <Grid item>\r\n              <Typography variant=\"body1\">\r\n                <b>{card.Last4digits}</b>\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"body2\">{card.NameOnCard}</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n\r\n      <Grid\r\n        container\r\n        item\r\n        component={Card}\r\n        className={classes.cardItem}\r\n        direction=\"column\"\r\n      >\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"row\"\r\n          justify=\"space-between\"\r\n          alignItems=\"center\"\r\n          style={{ flexWrap: \"nowrap\" }}\r\n        >\r\n          <Grid item className={classes.radioContainer}>\r\n            <Radio\r\n              value=\"9999\"\r\n              inputProps={{ \"aria-label\": \"add new credit card\" }}\r\n              checked={selectedCard === \"9999\"}\r\n              onChange={() => onSelectCard(\"9999\")}\r\n              color=\"primary\"\r\n              icon={<AddCircleOutlineIcon />}\r\n              checkedIcon={<RadioButtonCheckedIcon />}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid container item direction=\"column\" alignItems=\"flex-start\">\r\n            <Grid item>\r\n              <Typography variant=\"body1\">Add new credit card</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Collapse in={selectedCard === \"9999\"} timeout=\"auto\">\r\n          <AddCreditCard />\r\n        </Collapse>\r\n      </Grid>\r\n\r\n      <Grid\r\n        container\r\n        item\r\n        justify=\"space-between\"\r\n        className={classes.actionContainer}\r\n      >\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            color=\"primary\"\r\n            onClick={onBack}\r\n            disabled={\r\n              payCardStatus === status.loading ||\r\n              processOrderStatus === status.loading\r\n            }\r\n          >\r\n            Back\r\n          </Button>\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <Button\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            color=\"primary\"\r\n            onClick={onCharge}\r\n            disabled={\r\n              selectedCard === -1 ||\r\n              payCardStatus === status.loading ||\r\n              processOrderStatus === status.loading\r\n            }\r\n            endIcon={\r\n              (payCardStatus === status.loading ||\r\n                processOrderStatus === status.loading) && (\r\n                <CircularProgress size=\"0.875rem\" />\r\n              )\r\n            }\r\n          >\r\n            Charge\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectCreditCard);\r\n","E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\SplitPayment.js",["221","222","223","224","225","226"],"import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\n\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { evaluate } from \"mathjs\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { exchangeFormat } from \"../../Assets/currencies\";\r\nimport { status } from \"../../api/api\";\r\nimport {\r\n  setPaymentStage,\r\n  setPayWithCreditCard,\r\n  setPayWithPrepaidCard,\r\n  setPrepaidAmountUsd,\r\n} from \"../../Redux/PaymentReducer/Payment.act\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  minMaxWidth: {\r\n    width: \"100%\",\r\n    maxWidth: theme.scannerWidth,\r\n  },\r\n  minMaxWidthPrice: {\r\n    width: \"100%\",\r\n    maxWidth: parseInt(theme.scannerWidth / 1.5),\r\n    alignSelf: \"flex-start\",\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(4),\r\n    // marginBottom: theme.spacing(4),\r\n  },\r\n  chargeNote: {\r\n    paddingTop: theme.spacing(1),\r\n  },\r\n  prepaidBalance: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(4),\r\n  },\r\n\r\n  marginSpacing1: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  marginSpacing2: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  marginSpacing3: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  marginSpacing4: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n\r\n  pricesColumn: {\r\n    width: \"auto\",\r\n  },\r\n  alignInputText: {\r\n    \"& .MuiInputBase-input\": {\r\n      textAlign: \"center\",\r\n      maxWidth: 75,\r\n    },\r\n    '& input[type=\"number\"]': {\r\n      \"-moz-appearance\": \"textfield\",\r\n    },\r\n    '& input[type=\"number\"]::-webkit-clear-button, & input[type=\"number\"]::-webkit-outer-spin-button, & input[type=\"number\"]::-webkit-inner-spin-button': {\r\n      display: \"none !important\",\r\n      margin: 0,\r\n      \"-webkit-appearance\": \"none\",\r\n    },\r\n  },\r\n\r\n  continueItem: {\r\n    marginTop: theme.spacing(6),\r\n  },\r\n}));\r\n\r\nconst mapStateToProps = ({ AppReducer, BasketReducer, PaymentReducer }) => ({\r\n  creditBalance: BasketReducer.creditBalance,\r\n  totalPrice: BasketReducer.totalPrice,\r\n\r\n  currency: AppReducer.currency,\r\n  exchangeRate: BasketReducer.exchangeRate,\r\n  basketCurrency: BasketReducer.basketCurrency,\r\n\r\n  paymentStage: PaymentReducer.paymentStage,\r\n\r\n  payWithCreditCard: PaymentReducer.payWithCreditCard,\r\n  payWithPrepaidCard: PaymentReducer.payWithPrepaidCard,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setPaymentStage: bindActionCreators(setPaymentStage, dispatch),\r\n\r\n  setPayWithCreditCard: bindActionCreators(setPayWithCreditCard, dispatch),\r\n  setPayWithPrepaidCard: bindActionCreators(setPayWithPrepaidCard, dispatch),\r\n  setPrepaidAmountUsd: bindActionCreators(setPrepaidAmountUsd, dispatch),\r\n});\r\n\r\nfunction SplitPayment({\r\n  creditBalance,\r\n  totalPrice,\r\n\r\n  currency,\r\n  exchangeRate,\r\n  basketCurrency,\r\n\r\n  paymentStage,\r\n  setPaymentStage,\r\n\r\n  payWithCreditCard,\r\n  payWithPrepaidCard,\r\n  setPayWithCreditCard,\r\n  setPayWithPrepaidCard,\r\n  setPrepaidAmountUsd,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  const [prepaidEdit, setPrepaidEdit] = React.useState(\"\");\r\n  const onPrepaidChange = (e) => {\r\n    let inputVal = parseFloat(e.target.value);\r\n    if (isNaN(inputVal)) {\r\n      inputVal = 0;\r\n    } else {\r\n      const inputValInUsd = evaluate(\r\n        `(${inputVal} / ${exchangeRate[currency.iso]}) * ${\r\n          exchangeRate[\"USD\"]\r\n        } * ${1}`\r\n      );\r\n      if (inputValInUsd > creditBalance) {\r\n        inputVal = evaluate(\r\n          `(${creditBalance} / ${exchangeRate[\"USD\"]}) * ${\r\n            exchangeRate[currency.iso]\r\n          } * ${1}`\r\n        );\r\n      }\r\n    }\r\n\r\n    setPrepaidEdit(inputVal);\r\n  };\r\n\r\n  //\r\n  //this hook calculates the credit card amount according to user input of prepaid amount\r\n  React.useEffect(() => {\r\n    //total from basket currency to USD\r\n    let totalInUsd = evaluate(\r\n      `(${totalPrice} / ${exchangeRate[basketCurrency.trim()]}) * ${\r\n        exchangeRate[\"USD\"]\r\n      } * ${1}`\r\n    );\r\n\r\n    //prepaidEdit from currency.iso to USD\r\n    //  (prepaidEdit is always in user currency)\r\n    const prepaidEditInUsd = evaluate(\r\n      `(${prepaidEdit || 0} / ${exchangeRate[currency.iso]}) * ${\r\n        exchangeRate[\"USD\"]\r\n      } * ${1}`\r\n    );\r\n\r\n    //the minimum in USD\r\n    const minCreditInUsd = Math.min(\r\n      prepaidEdit !== \"\" ? prepaidEditInUsd : creditBalance,\r\n      totalInUsd\r\n    );\r\n\r\n    //credit card is is the complementary\r\n    const creditCardInUsd = totalInUsd - minCreditInUsd;\r\n\r\n    //that reminder to basket currency\r\n    const creditCardInBasketCurrency = evaluate(\r\n      `(${creditCardInUsd} / ${exchangeRate[\"USD\"]}) * ${\r\n        exchangeRate[basketCurrency.trim()]\r\n      } * ${1}`\r\n    );\r\n\r\n    //minimum in user currency\r\n    const minCreditInUserCurrency = parseFloat(\r\n      evaluate(\r\n        `(${minCreditInUsd} / ${exchangeRate[\"USD\"]}) * ${\r\n          exchangeRate[currency.iso]\r\n        } * ${1}`\r\n      ).toFixed(2)\r\n    );\r\n\r\n    setPayWithPrepaidCard(minCreditInUserCurrency);\r\n    setPrepaidAmountUsd(minCreditInUsd);\r\n    setPayWithCreditCard(creditCardInBasketCurrency);\r\n  }, [\r\n    prepaidEdit,\r\n    payWithPrepaidCard,\r\n    basketCurrency,\r\n    creditBalance,\r\n    exchangeRate,\r\n    setPayWithCreditCard,\r\n    setPayWithPrepaidCard,\r\n    setPrepaidAmountUsd,\r\n    totalPrice,\r\n    currency,\r\n  ]);\r\n\r\n  const [adornments, setAdornments] = React.useState({ start: \"\", end: \"\" });\r\n  React.useEffect(() => {\r\n    let start = \"\";\r\n    let end = \"\";\r\n\r\n    if (currency.symbolPosition === \"left\") {\r\n      start = currency.symbol;\r\n      end = currency.iso;\r\n    } else {\r\n      start = currency.iso;\r\n      end = currency.symbol;\r\n    }\r\n\r\n    setAdornments({ start, end });\r\n  }, [currency]);\r\n\r\n  //\r\n  //\r\n  const onContinue = () => {\r\n    setPaymentStage(paymentStage + 1);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/*<Grid item className={clsx(classes.minMaxWidth, classes.instructions)}>\r\n        <Typography variant=\"h5\">\r\n          You can split the payment between prepaid card and credit card.\r\n          <Typography variant=\"body1\" className={classes.chargeNote}>\r\n            We always charge in $USD.\r\n          </Typography>\r\n        </Typography>\r\n      </Grid>*/}\r\n\r\n      {/** prepaid card balance */}\r\n      {/*<Grid\r\n        item\r\n        container\r\n        className={clsx(classes.minMaxWidthPrice, classes.prepaidBalance)}\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"body1\" align=\"left\">\r\n            Your prepaid card balance:\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"column\"\r\n          className={classes.pricesColumn}\r\n        >\r\n          <Grid item>\r\n            <Typography variant=\"body1\" align=\"right\">\r\n              {exchangeFormat({\r\n                localPrice: creditBalance,\r\n                fromCurrency: \"USD\",\r\n                toCurrency: currency.iso,\r\n                exchangeRate,\r\n                withIso: true,\r\n                caller: \"prepaid card balance user currency\",\r\n              })}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"body2\" align=\"right\">\r\n              {exchangeFormat({\r\n                localPrice: creditBalance,\r\n                fromCurrency: \"USD\",\r\n                toCurrency: \"USD\",\r\n                exchangeRate,\r\n                withIso: true,\r\n                caller: \"prepaid card balance USD\",\r\n              })}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>*/}\r\n\r\n      {/** pay with prepaid card */}\r\n      <Grid\r\n        item\r\n        container\r\n        className={clsx(classes.minMaxWidthPrice, classes.marginSpacing4)}\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"body1\" align=\"left\">\r\n            Pay with Prepaid Credit:\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"column\"\r\n          className={classes.pricesColumn}\r\n        >\r\n          <Grid item>\r\n            {/*<TextField\r\n              type=\"number\"\r\n              // value={exchangeFormat({\r\n              //   localPrice: payWithPrepaidCard,\r\n              //   fromCurrency: \"USD\",\r\n              //   toCurrency: currency.iso,\r\n              //   exchangeRate,\r\n              //   withSymbol: false,\r\n              //   caller: \"pay with prepaid card user currency input\",\r\n              // })}\r\n              value={payWithPrepaidCard}\r\n              disabled={creditBalance === 0}\r\n              onChange={onPrepaidChange}\r\n              InputProps={{\r\n                className: classes.alignInputText,\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    {adornments.start}\r\n                  </InputAdornment>\r\n                ),\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    {adornments.end}\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />*/}\r\n            <Typography variant=\"body1\" align=\"right\">\r\n              {exchangeFormat({\r\n                localPrice: payWithPrepaidCard,\r\n                fromCurrency: currency.iso,\r\n                toCurrency: currency.iso,\r\n                exchangeRate,\r\n                caller: \"pay total user currency\",\r\n              })}\r\n            </Typography>\r\n          </Grid>\r\n\r\n          {/*<Grid item>\r\n            <Typography variant=\"body2\" align=\"right\">\r\n              {exchangeFormat({\r\n                localPrice: payWithPrepaidCard, //this is always in user currency\r\n                fromCurrency: currency.iso,\r\n                toCurrency: \"USD\",\r\n                exchangeRate,\r\n                withIso: true,\r\n                caller: \"pay with prepaid card USD\",\r\n              })}\r\n            </Typography>\r\n          </Grid>*/}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/** pay with credit card */}\r\n      <Grid\r\n        item\r\n        container\r\n        className={clsx(classes.minMaxWidthPrice, classes.marginSpacing1)}\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"body1\" align=\"left\">\r\n            Pay with Credit Card:\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"column\"\r\n          className={classes.pricesColumn}\r\n        >\r\n          <Grid item>\r\n            <Typography variant=\"body1\" align=\"right\">\r\n              {exchangeFormat({\r\n                localPrice: payWithCreditCard,\r\n                fromCurrency: basketCurrency,\r\n                toCurrency: currency.iso,\r\n                exchangeRate,\r\n                caller: \"pay with credit card user currency\",\r\n              })}\r\n            </Typography>\r\n          </Grid>\r\n          {/*<Grid item>\r\n            <Typography variant=\"body2\" align=\"right\">\r\n              {exchangeFormat({\r\n                localPrice: payWithCreditCard,\r\n                fromCurrency: basketCurrency,\r\n                toCurrency: \"USD\",\r\n                exchangeRate,\r\n                withIso: true,\r\n                caller: \"pay with credit card USD\",\r\n              })}\r\n            </Typography>\r\n          </Grid>*/}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/** total price */}\r\n      <Grid\r\n        item\r\n        container\r\n        className={clsx(classes.minMaxWidthPrice, classes.marginSpacing1)}\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"body1\" align=\"left\">\r\n            Total order:\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"column\"\r\n          className={classes.pricesColumn}\r\n        >\r\n          <Grid item>\r\n            <Typography variant=\"body1\" align=\"right\">\r\n              {exchangeFormat({\r\n                localPrice: totalPrice,\r\n                fromCurrency: basketCurrency,\r\n                toCurrency: currency.iso,\r\n                exchangeRate,\r\n                caller: \"pay total user currency\",\r\n              })}\r\n            </Typography>\r\n          </Grid>\r\n          {/*<Grid item>\r\n            <Typography variant=\"body2\" align=\"right\">\r\n              {exchangeFormat({\r\n                localPrice: totalPrice,\r\n                fromCurrency: basketCurrency,\r\n                toCurrency: \"USD\",\r\n                exchangeRate,\r\n                withIso: true,\r\n                caller: \"pay total USD\",\r\n              })}\r\n            </Typography>\r\n          </Grid>*/}\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid item className={classes.continueItem}>\r\n        <Button\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          color=\"primary\"\r\n          onClick={onContinue}\r\n        >\r\n          Continue\r\n        </Button>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SplitPayment);\r\n","E:\\React\\Mobile-Spinmor\\src\\Components\\Basket\\BasketSummaryLink.js",["227","228"],"E:\\React\\Mobile-Spinmor\\src\\Redux\\ScannerReducer\\Scanner.types.js",[],"E:\\React\\Mobile-Spinmor\\src\\Redux\\PaymentReducer\\Payment.types.js",[],"E:\\React\\Mobile-Spinmor\\src\\Components\\Basket\\BasketTable.js",["229","230"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport DeleteForeverOutlinedIcon from \"@material-ui/icons/DeleteForeverOutlined\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\r\n\r\nimport { exchangeFormat } from \"../../Assets/currencies\";\r\nimport { status } from \"../../api/api\";\r\n\r\nimport {\r\n  getBasketItemsAction,\r\n  setAddToBasketStatus,\r\n  addItemToBasket,\r\n  editBasketItem,\r\n  setGetBasketItemsStatus,\r\n} from \"../../Redux/BasketReducer/Basket.act\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  minMaxWidth: {\r\n    width: \"100%\",\r\n    maxWidth: theme.scannerWidth,\r\n  },\r\n}));\r\n\r\nconst mapStateToProps = ({ AppReducer, BasketReducer }) => ({\r\n  basketItems: BasketReducer.basketItems,\r\n  getBasketItemsStatus: BasketReducer.getBasketItemsStatus,\r\n  basketCurrency: BasketReducer.basketCurrency,\r\n\r\n  currency: AppReducer.currency,\r\n  exchangeRate: BasketReducer.exchangeRate,\r\n\r\n  calculatedTax: BasketReducer.calculatedTax,\r\n  calculatedTotalAmount: BasketReducer.calculatedTotalAmount,\r\n  // totalPrice: BasketReducer.totalPrice,\r\n  // totalTax: BasketReducer.totalTax,\r\n\r\n  addToBasketStatus: BasketReducer.addToBasketStatus,\r\n\r\n  editedBasketItem: BasketReducer.editedBasketItem,\r\n\r\n  deleteBasketStatus: BasketReducer.deleteBasketStatus,\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getBasketItemsAction: bindActionCreators(getBasketItemsAction, dispatch),\r\n  setAddToBasketStatus: bindActionCreators(setAddToBasketStatus, dispatch),\r\n  addItemToBasket: bindActionCreators(addItemToBasket, dispatch),\r\n  editBasketItem: bindActionCreators(editBasketItem, dispatch),\r\n  setGetBasketItemsStatus: bindActionCreators(\r\n    setGetBasketItemsStatus,\r\n    dispatch\r\n  ),\r\n});\r\n\r\nfunction BasketTable({\r\n  basketItems,\r\n  getBasketItemsAction,\r\n  getBasketItemsStatus,\r\n  basketCurrency,\r\n\r\n  currency,\r\n  exchangeRate,\r\n\r\n  calculatedTax,\r\n  calculatedTotalAmount,\r\n\r\n  addToBasketStatus,\r\n  addItemToBasket,\r\n  editBasketItem,\r\n  editedBasketItem,\r\n  setAddToBasketStatus,\r\n  setGetBasketItemsStatus,\r\n\r\n  deleteBasketStatus,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  //initialize\r\n  React.useEffect(() => {\r\n    getBasketItemsAction();\r\n\r\n    return function cleanup() {\r\n      editBasketItem({\r\n        qr: \"\",\r\n        ItemListId: -1,\r\n        qty: 0,\r\n        ItemName: \"\",\r\n      });\r\n\r\n      setAddToBasketStatus(status.not_started);\r\n      setGetBasketItemsStatus(status.not_started);\r\n    };\r\n  }, [\r\n    getBasketItemsAction,\r\n    editBasketItem,\r\n    setAddToBasketStatus,\r\n    setGetBasketItemsStatus,\r\n  ]);\r\n\r\n  //get entire basket again when changing quantity of item or deleting the basket\r\n  React.useEffect(() => {\r\n    if (\r\n      addToBasketStatus === status.finish ||\r\n      deleteBasketStatus === status.finish\r\n    ) {\r\n      getBasketItemsAction();\r\n    }\r\n  }, [addToBasketStatus, deleteBasketStatus, getBasketItemsAction]);\r\n\r\n  //used to show loader only once\r\n  const [itemsChangeCounter, setItemsChangeCounter] = React.useState(0);\r\n  React.useEffect(() => {\r\n    if (getBasketItemsStatus === status.finish) {\r\n      setItemsChangeCounter((itemsChangeCounter) => itemsChangeCounter + 1);\r\n    }\r\n  }, [getBasketItemsStatus]);\r\n\r\n  //remove item\r\n  const [isAlertOpen, setIsAlertOpen] = React.useState(false);\r\n  const alertDelete = (itemToDelete) => {\r\n    setIsAlertOpen(true);\r\n    editBasketItem({\r\n      qr: itemToDelete.QRCodetoReturn,\r\n      ItemListId: itemToDelete.ItemListId,\r\n      qty: itemToDelete.Quantity * -1,\r\n      ItemName: itemToDelete.ItemName,\r\n    });\r\n  };\r\n\r\n  const cancelDelete = () => {\r\n    if (\r\n      getBasketItemsStatus === status.loading ||\r\n      addToBasketStatus === status.loading\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setIsAlertOpen(false);\r\n    setAddToBasketStatus(status.not_started);\r\n  };\r\n  const confirmDelete = () => {\r\n    addItemToBasket({ editedInBasket: true });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (getBasketItemsStatus === status.finish) {\r\n      setIsAlertOpen(false);\r\n    }\r\n  }, [getBasketItemsStatus]);\r\n\r\n  const updateQty = (itemToUpdate, qty) => {\r\n    if (qty === -1 && itemToUpdate.Quantity === 1) {\r\n      alertDelete(itemToUpdate);\r\n      return;\r\n    }\r\n\r\n    editBasketItem({\r\n      qr: itemToUpdate.QRCodetoReturn,\r\n      ItemListId: itemToUpdate.ItemListId,\r\n      qty,\r\n      ItemName: itemToUpdate.ItemName,\r\n    });\r\n    addItemToBasket({ editedInBasket: true });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {getBasketItemsStatus === status.loading && itemsChangeCounter === 0 && (\r\n        <Grid item>\r\n          <CircularProgress />\r\n        </Grid>\r\n      )}\r\n\r\n      {getBasketItemsStatus.split(\" \")[0] === status.error && (\r\n        <Grid item className={classes.minMaxWidth}>\r\n          <Typography variant=\"body2\" align=\"left\">\r\n            Error getting your basket {getBasketItemsStatus.split(\" \")[1]}\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n\r\n      {basketItems.length === 0 && getBasketItemsStatus === status.finish && (\r\n        <Grid item className={classes.minMaxWidth}>\r\n          <Typography variant=\"h6\" align=\"center\">\r\n            No items in your basket&nbsp;\r\n            <Link component={RouterLink} to=\"/\">\r\n              start scanning\r\n            </Link>\r\n          </Typography>\r\n        </Grid>\r\n      )}\r\n\r\n      {(getBasketItemsStatus.split(\" \")[0] === status.error ||\r\n        addToBasketStatus.split(\" \")[0] === status.error) &&\r\n        itemsChangeCounter > 0 && (\r\n          <Grid item className={classes.minMaxWidth}>\r\n            <Typography variant=\"body2\" align=\"left\">\r\n              Error updating item quantity{\" \"}\r\n              {getBasketItemsStatus\r\n                ? getBasketItemsStatus.split(\" \")[1]\r\n                : addToBasketStatus.split(\" \")[1]}\r\n            </Typography>\r\n          </Grid>\r\n        )}\r\n\r\n      {basketItems.length > 0 && itemsChangeCounter > 0 && (\r\n        <Grid item className={classes.minMaxWidth}>\r\n          <TableContainer component={Paper} style={{ marginTop: 16 }}>\r\n            <Table aria-label=\"basket table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell />\r\n                  <TableCell align=\"left\" scope=\"col\">\r\n                    Quantity\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" scope=\"col\">\r\n                    Item\r\n                  </TableCell>\r\n                  <TableCell align=\"center\" scope=\"col\">\r\n                    Price\r\n                  </TableCell>\r\n                  <TableCell align=\"right\" scope=\"col\">\r\n                    Extended\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n\r\n              <TableBody>\r\n                {basketItems.map((item) => (\r\n                  <TableRow key={item.ItemListId}>\r\n                    <TableCell padding=\"checkbox\">\r\n                      <IconButton\r\n                        onClick={() => alertDelete(item)}\r\n                        disabled={\r\n                          getBasketItemsStatus === status.loading ||\r\n                          addToBasketStatus === status.loading\r\n                        }\r\n                      >\r\n                        {(getBasketItemsStatus === status.loading ||\r\n                          addToBasketStatus === status.loading) &&\r\n                        item.ItemListId === editedBasketItem.ItemListId ? (\r\n                          <CircularProgress size=\"1.5rem\" />\r\n                        ) : (\r\n                          <DeleteForeverOutlinedIcon />\r\n                        )}\r\n                      </IconButton>\r\n                    </TableCell>\r\n\r\n                    <TableCell align=\"left\">\r\n                      <IconButton\r\n                        onClick={() => updateQty(item, -1)}\r\n                        disabled={\r\n                          getBasketItemsStatus === status.loading ||\r\n                          addToBasketStatus === status.loading\r\n                        }\r\n                      >\r\n                        <RemoveCircleOutlineIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                      {item.Quantity}\r\n                      <IconButton\r\n                        onClick={() => updateQty(item, 1)}\r\n                        disabled={\r\n                          getBasketItemsStatus === status.loading ||\r\n                          addToBasketStatus === status.loading\r\n                        }\r\n                      >\r\n                        <AddCircleOutlineIcon fontSize=\"small\" />\r\n                      </IconButton>\r\n                    </TableCell>\r\n\r\n                    <TableCell align=\"left\">{item.ItemName}</TableCell>\r\n\r\n                    <TableCell align=\"center\">\r\n                      {exchangeFormat({\r\n                        localPrice: item.Price,\r\n                        fromCurrency: basketCurrency,\r\n                        toCurrency: currency.iso,\r\n                        exchangeRate,\r\n                        caller: \"table price\",\r\n                      })}\r\n                    </TableCell>\r\n\r\n                    <TableCell align=\"right\">\r\n                      {exchangeFormat({\r\n                        localPrice: item.Price,\r\n                        fromCurrency: basketCurrency,\r\n                        toCurrency: currency.iso,\r\n                        exchangeRate,\r\n                        caller: \"table extended\",\r\n                        pieces: item.Quantity,\r\n                      })}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n\r\n                <TableRow>\r\n                  <TableCell />\r\n                  <TableCell>Tax</TableCell>\r\n                  <TableCell />\r\n                  <TableCell />\r\n                  <TableCell align=\"right\">\r\n                    {exchangeFormat({\r\n                      localPrice: calculatedTax,\r\n                      fromCurrency: basketCurrency,\r\n                      toCurrency: currency.iso,\r\n                      exchangeRate,\r\n                      caller: \"table tax\",\r\n                    })}\r\n                  </TableCell>\r\n                </TableRow>\r\n\r\n                <TableRow>\r\n                  <TableCell />\r\n                  <TableCell style={{ fontWeight: \"bold\" }}>\r\n                    Total amount\r\n                  </TableCell>\r\n                  <TableCell />\r\n                  <TableCell />\r\n                  <TableCell style={{ fontWeight: \"bold\" }} align=\"right\">\r\n                    {exchangeFormat({\r\n                      localPrice: calculatedTotalAmount,\r\n                      fromCurrency: basketCurrency,\r\n                      toCurrency: currency.iso,\r\n                      exchangeRate,\r\n                      caller: \"table amount\",\r\n                    })}\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      )}\r\n\r\n      <Dialog\r\n        open={isAlertOpen}\r\n        onClose={cancelDelete}\r\n        aria-labelledby=\"delete-dialog-title\"\r\n        aria-describedby=\"delete-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"delete-dialog-title\">Delete item</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"delete-dialog-description\">\r\n            Are you sure you want delete {editedBasketItem.ItemName}?\r\n          </DialogContentText>\r\n\r\n          {(getBasketItemsStatus === status.loading ||\r\n            addToBasketStatus === status.loading) && <CircularProgress />}\r\n\r\n          {(getBasketItemsStatus.split(\" \")[0] === status.error ||\r\n            addToBasketStatus.split(\" \")[0] === status.error) &&\r\n            itemsChangeCounter > 0 && (\r\n              <Typography variant=\"body2\" align=\"left\">\r\n                Error updating item quantity{\" \"}\r\n                {getBasketItemsStatus\r\n                  ? getBasketItemsStatus.split(\" \")[1]\r\n                  : addToBasketStatus.split(\" \")[1]}\r\n              </Typography>\r\n            )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={confirmDelete}\r\n            color=\"primary\"\r\n            disabled={\r\n              getBasketItemsStatus === status.loading ||\r\n              addToBasketStatus === status.loading\r\n            }\r\n          >\r\n            Delete\r\n          </Button>\r\n\r\n          <Button\r\n            onClick={cancelDelete}\r\n            color=\"primary\"\r\n            autoFocus\r\n            disabled={\r\n              getBasketItemsStatus === status.loading ||\r\n              addToBasketStatus === status.loading\r\n            }\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BasketTable);\r\n","E:\\React\\Mobile-Spinmor\\src\\Screens\\Scanner.js",["231","232","233","234","235"],"E:\\React\\Mobile-Spinmor\\src\\Components\\Scanner\\ScannedItem.js",["236"],"E:\\React\\Mobile-Spinmor\\src\\Redux\\ScannerReducer\\Scanner.act.js",["237","238"],"import {\r\n  SCANNER_READY_ONCE,\r\n  SET_SCAN_DELAY,\r\n  SET_IS_SCAN_SUCCESS,\r\n  SET_SCAN_RESULT,\r\n  SET_SCAN_ERROR,\r\n  //\r\n  GET_ITEM_LOADING,\r\n  GET_ITEM_ERROR,\r\n  SET_QR_ITEM,\r\n  SET_QR_LOCATION,\r\n  //\r\n  SET_QTY,\r\n  SET_IS_INPUT_EMPTY,\r\n  //\r\n  GET_ITEM_LIKES_STATUS,\r\n  SET_ITEM_LIKES,\r\n  GET_ITEM_REVIEWS_STATUS,\r\n  SET_ITEM_REVIEWS,\r\n} from \"./Scanner.types\";\r\n\r\nimport { defaultScanDelay } from \"../../Assets/consts\";\r\nimport { axiosInstance, status } from \"../../api/api\";\r\nimport { setBasketLocation } from \"../BasketReducer/Basket.act\";\r\nimport { setProdStatus } from \"../AppReducer/App.act\";\r\n\r\nexport const setScannerReadyOnce = (scannerReadyOnce = true) => ({\r\n  type: SCANNER_READY_ONCE,\r\n  payload: scannerReadyOnce,\r\n});\r\n\r\nexport const setScanDelay = (delay) => ({\r\n  type: SET_SCAN_DELAY,\r\n  payload: delay,\r\n});\r\n\r\nexport const setIsScanSuccess = (isScanSuccess) => ({\r\n  type: SET_IS_SCAN_SUCCESS,\r\n  payload: isScanSuccess,\r\n});\r\n\r\nexport const setScanResult = (scanResult) => ({\r\n  type: SET_SCAN_RESULT,\r\n  payload: scanResult,\r\n});\r\n\r\nexport const setScanError = (scanError) => ({\r\n  type: SET_SCAN_ERROR,\r\n  payload: scanError,\r\n});\r\n\r\nexport const handleScan = (data) => (dispatch) => {\r\n  if (!data) {\r\n    return;\r\n  }\r\n\r\n  dispatch(setScanDelay(false));\r\n  dispatch(setScanResult(data));\r\n  dispatch(setScanError(null));\r\n  dispatch(setIsScanSuccess(true));\r\n};\r\n\r\n//\r\n//\r\nexport const setGetItemLoading = (getItemLoading) => ({\r\n  type: GET_ITEM_LOADING,\r\n  payload: getItemLoading,\r\n});\r\n\r\nexport const setGetItemError = (getItemError) => ({\r\n  type: GET_ITEM_ERROR,\r\n  payload: getItemError,\r\n});\r\n\r\nexport const setQrItem = (qrItem) => ({\r\n  type: SET_QR_ITEM,\r\n  payload: qrItem,\r\n});\r\n\r\nexport const setQrLocation = (qrLocation) => ({\r\n  type: SET_QR_LOCATION,\r\n  payload: qrLocation,\r\n});\r\n\r\nexport const getItemByQr = () => async (dispatch, getState) => {\r\n  const { scanResult, scanError } = getState().ScannerReducer;\r\n\r\n  if (scanError || !scanResult || scanResult === \"no result\") {\r\n    console.debug(\"getItemByQr not initiated because of flags\");\r\n    return;\r\n  }\r\n\r\n  dispatch(setGetItemLoading(true));\r\n\r\n  try {\r\n    const getItemListResponse = await axiosInstance({\r\n      method: \"get\",\r\n      url: \"/api/GetItemList\",\r\n      params: {\r\n        QrCode: scanResult,\r\n      },\r\n      headers: {\r\n        Authorization: \"Bearer \" + getState().AppReducer.token,\r\n      },\r\n    });\r\n    if (getItemListResponse.data) {\r\n      // console.log(getItemListResponse.data);\r\n\r\n      const withTrimmedCurrency = {\r\n        ...getItemListResponse.data,\r\n        Currency: getItemListResponse.data.Currency.trim(),\r\n      };\r\n      dispatch(setQrItem(withTrimmedCurrency));\r\n      dispatch(setBasketLocation(getItemListResponse.data.LocationName));\r\n      if (getItemListResponse.data.hasOwnProperty(\"OperatorStatus\")) {\r\n        if (typeof getItemListResponse.data.OperatorStatus === \"string\") {\r\n          dispatch(setProdStatus(getItemListResponse.data.OperatorStatus));\r\n        }\r\n      }\r\n    } else {\r\n      dispatch(setGetItemError(404));\r\n      dispatch(setQrItem(null));\r\n    }\r\n  } catch (error) {\r\n    if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      // that falls out of the range of 2xx\r\n      console.log(error.response.data);\r\n      console.log(error.response.status);\r\n      dispatch(setGetItemError(error.response.status));\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\r\n      // http.ClientRequest in node.js\r\n      console.log(error.request);\r\n      dispatch(setGetItemError(500));\r\n    } else {\r\n      // Something happened in setting up the request that triggered an Error\r\n      console.log(\"Error\", error.message);\r\n      dispatch(setGetItemError(500));\r\n    }\r\n  } finally {\r\n    // setTimeout(() => dispatch(setScanDelay(defaultScanDelay)), 2500);\r\n    dispatch(setGetItemLoading(false));\r\n    dispatch(setScanError(null));\r\n    dispatch(setIsScanSuccess(false));\r\n  }\r\n};\r\n\r\nexport const getLocationByQR = () => async (dispatch, getState) => {\r\n  const { scanResult } = getState().ScannerReducer;\r\n  try {\r\n    let res = await axiosInstance({\r\n      method: \"get\",\r\n      url: \"/API/GetLocationByQR\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + getState().AppReducer.token,\r\n      },\r\n      withCredentials: true,\r\n      params: {\r\n        QrCode: String(scanResult).substring(0, 13)\r\n      },\r\n    });\r\n\r\n    if (res.data) dispatch(setQrLocation(res.data));\r\n    else dispatch(setQrLocation(null));\r\n  } catch (error) {\r\n    let caughtError = 500;\r\n\r\n    if (error.response) {\r\n      console.log(error.response.data);\r\n      console.log(error.response.status);\r\n      caughtError = error.response.status;\r\n    } else if (error.request) {\r\n      console.log(error.request);\r\n    } else {\r\n      console.log(\"Error\", error.message);\r\n    }\r\n    dispatch(setQrLocation(null));\r\n    return;\r\n  }\r\n};\r\n\r\n//\r\n//\r\nexport const setQty = (qty) => ({\r\n  type: SET_QTY,\r\n  payload: qty,\r\n});\r\n\r\nexport const setIsInputEmpty = (isInputEmpty) => ({\r\n  type: SET_IS_INPUT_EMPTY,\r\n  payload: isInputEmpty,\r\n});\r\n\r\nexport const onInputChange = (eTargetValue, setValue = false) => (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const { qty } = getState().ScannerReducer;\r\n\r\n  const intInput = parseInt(eTargetValue);\r\n\r\n  if (isNaN(intInput) || (setValue && intInput < 0)) {\r\n    dispatch(setQty(0));\r\n    dispatch(setIsInputEmpty(true));\r\n    return;\r\n  } else {\r\n    dispatch(setIsInputEmpty(false));\r\n  }\r\n\r\n  if (setValue) {\r\n    dispatch(setQty(intInput));\r\n  } else {\r\n    let newAmount = qty + intInput;\r\n    dispatch(setQty(newAmount));\r\n    if (newAmount === 0) {\r\n      dispatch(setIsInputEmpty(false));\r\n    }\r\n  }\r\n};\r\n\r\n//\r\n//\r\n\r\nexport const setGetItemLikesStatus = (getItemLikesStatus) => ({\r\n  type: GET_ITEM_LIKES_STATUS,\r\n  payload: getItemLikesStatus,\r\n});\r\n\r\nexport const setItemLikes = (itemLikes) => ({\r\n  type: SET_ITEM_LIKES,\r\n  payload: itemLikes,\r\n});\r\n\r\nexport const getItemLikesAction = () => async (dispatch, getState) => {\r\n  dispatch(setGetItemLikesStatus(status.loading));\r\n\r\n  try {\r\n    const getItemLikesRes = await axiosInstance({\r\n      method: \"get\",\r\n      url: \"/api/Likes\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + getState().AppReducer.token,\r\n      },\r\n      withCredentials: true,\r\n      params: {\r\n        ItemListid: getState().ScannerReducer.qrItem.ItemListId,\r\n      },\r\n    });\r\n\r\n    if (getItemLikesRes.data) {\r\n      const likesRes = {\r\n        Likes: getItemLikesRes.data.Likes ?? 0,\r\n        DisLikes: getItemLikesRes.data.DisLikes ?? 0,\r\n        Indifferent: getItemLikesRes.data.Indifferent ?? 0,\r\n        Comment: getItemLikesRes.data.Comment ?? 0,\r\n      };\r\n      likesRes.total =\r\n        likesRes.Likes + likesRes.DisLikes + likesRes.Indifferent;\r\n\r\n      dispatch(setItemLikes(likesRes));\r\n\r\n      dispatch(setGetItemLikesStatus(status.finish));\r\n    } else {\r\n      dispatch(setGetItemLikesStatus(`${status.error} 404`));\r\n      return;\r\n    }\r\n  } catch (error) {\r\n    let caughtError = 500;\r\n\r\n    if (error.response) {\r\n      console.log(error.response.data);\r\n      console.log(error.response.status);\r\n      caughtError = error.response.status;\r\n    } else if (error.request) {\r\n      console.log(error.request);\r\n    } else {\r\n      console.log(\"Error\", error.message);\r\n    }\r\n\r\n    dispatch(setGetItemLikesStatus(`${status.error} ${caughtError}`));\r\n    return;\r\n  }\r\n};\r\n\r\nexport const setGetItemReviewsStatus = (getItemReviewsStatus) => ({\r\n  type: GET_ITEM_REVIEWS_STATUS,\r\n  payload: getItemReviewsStatus,\r\n});\r\n\r\nexport const setItemReviews = (itemReviews) => ({\r\n  type: SET_ITEM_REVIEWS,\r\n  payload: itemReviews,\r\n});\r\n\r\nexport const getItemReviewsAction = () => async (dispatch, getState) => {\r\n  dispatch(setGetItemReviewsStatus(status.loading));\r\n\r\n  const qrItem = getState().ScannerReducer.qrItem;\r\n  if (!qrItem) {\r\n    dispatch(setGetItemReviewsStatus(`${status.error} 404`));\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const getItemReviewsRes = await axiosInstance({\r\n      method: \"get\",\r\n      url: \"/api/ItemReviews\",\r\n      headers: {\r\n        Authorization: \"Bearer \" + getState().AppReducer.token,\r\n      },\r\n      withCredentials: true,\r\n      params: {\r\n        ItemListid: qrItem.ItemListId,\r\n      },\r\n    });\r\n\r\n    if (getItemReviewsRes.data) {\r\n      if (!Array.isArray(getItemReviewsRes.data)) {\r\n        dispatch(setGetItemReviewsStatus(`${status.error} 404`));\r\n      }\r\n\r\n      dispatch(setItemReviews(getItemReviewsRes.data));\r\n      dispatch(setGetItemReviewsStatus(status.finish));\r\n    } else {\r\n      dispatch(setGetItemReviewsStatus(`${status.error} 404`));\r\n      return;\r\n    }\r\n  } catch (error) {\r\n    let caughtError = 500;\r\n\r\n    if (error.response) {\r\n      console.log(error.response.data);\r\n      console.log(error.response.status);\r\n      caughtError = error.response.status;\r\n    } else if (error.request) {\r\n      console.log(error.request);\r\n    } else {\r\n      console.log(\"Error\", error.message);\r\n    }\r\n\r\n    dispatch(setGetItemReviewsStatus(`${status.error} ${caughtError}`));\r\n    return;\r\n  }\r\n};\r\n","E:\\React\\Mobile-Spinmor\\src\\Redux\\ScannerReducer\\Scanner.red.js",[],"E:\\React\\Mobile-Spinmor\\src\\Components\\Custom\\CButton.js",[],"E:\\React\\Mobile-Spinmor\\src\\App\\AppProvider.js",[],"E:\\React\\Mobile-Spinmor\\src\\App\\styles.js",[],"E:\\React\\Mobile-Spinmor\\src\\Redux\\BasketReducer\\Basket.act.js",[],"E:\\React\\Mobile-Spinmor\\src\\Redux\\BasketReducer\\Basket.red.js",[],"E:\\React\\Mobile-Spinmor\\src\\Components\\Payment\\ConfirmPayment.js",[],"E:\\React\\Mobile-Spinmor\\src\\Redux\\BasketReducer\\Basket.types.js",[],"E:\\React\\Mobile-Spinmor\\src\\Components\\Scanner\\GoodImage.js",["239","240"],"E:\\React\\Mobile-Spinmor\\src\\Redux\\PaymentReducer\\Payment.act.js",[],"E:\\React\\Mobile-Spinmor\\src\\Redux\\ReportReducer\\Report.act.js",[],{"ruleId":"241","replacedBy":"242"},{"ruleId":"243","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"246","line":6,"column":10,"nodeType":"247","messageId":"248","endLine":6,"endColumn":14},{"ruleId":"245","severity":1,"message":"249","line":6,"column":16,"nodeType":"247","messageId":"248","endLine":6,"endColumn":25},{"ruleId":"245","severity":1,"message":"250","line":12,"column":8,"nodeType":"247","messageId":"248","endLine":12,"endColumn":24},{"ruleId":"245","severity":1,"message":"251","line":21,"column":10,"nodeType":"247","messageId":"248","endLine":21,"endColumn":24},{"ruleId":"241","replacedBy":"252"},{"ruleId":"243","replacedBy":"253"},{"ruleId":"241","replacedBy":"254"},{"ruleId":"243","replacedBy":"255"},{"ruleId":"256","severity":1,"message":"257","line":56,"column":6,"nodeType":"258","endLine":56,"endColumn":18,"suggestions":"259"},{"ruleId":"241","replacedBy":"260"},{"ruleId":"243","replacedBy":"261"},{"ruleId":"245","severity":1,"message":"262","line":17,"column":8,"nodeType":"247","messageId":"248","endLine":17,"endColumn":12},{"ruleId":"256","severity":1,"message":"263","line":9,"column":6,"nodeType":"258","endLine":9,"endColumn":19,"suggestions":"264"},{"ruleId":"245","severity":1,"message":"262","line":14,"column":8,"nodeType":"247","messageId":"248","endLine":14,"endColumn":12},{"ruleId":"265","severity":1,"message":"266","line":138,"column":19,"nodeType":"267","messageId":"268","endLine":138,"endColumn":21},{"ruleId":"265","severity":1,"message":"269","line":149,"column":19,"nodeType":"267","messageId":"268","endLine":149,"endColumn":21},{"ruleId":"270","severity":1,"message":"271","line":150,"column":22,"nodeType":"272","endLine":150,"endColumn":85},{"ruleId":"270","severity":1,"message":"271","line":156,"column":15,"nodeType":"272","endLine":156,"endColumn":77},{"ruleId":"245","severity":1,"message":"251","line":20,"column":10,"nodeType":"247","messageId":"248","endLine":20,"endColumn":24},{"ruleId":"245","severity":1,"message":"273","line":11,"column":8,"nodeType":"247","messageId":"248","endLine":11,"endColumn":17},{"ruleId":"245","severity":1,"message":"274","line":12,"column":8,"nodeType":"247","messageId":"248","endLine":12,"endColumn":22},{"ruleId":"245","severity":1,"message":"250","line":13,"column":8,"nodeType":"247","messageId":"248","endLine":13,"endColumn":24},{"ruleId":"245","severity":1,"message":"275","line":19,"column":10,"nodeType":"247","messageId":"248","endLine":19,"endColumn":16},{"ruleId":"245","severity":1,"message":"276","line":126,"column":9,"nodeType":"247","messageId":"248","endLine":126,"endColumn":24},{"ruleId":"245","severity":1,"message":"277","line":207,"column":10,"nodeType":"247","messageId":"248","endLine":207,"endColumn":20},{"ruleId":"245","severity":1,"message":"278","line":4,"column":10,"nodeType":"247","messageId":"248","endLine":4,"endColumn":28},{"ruleId":"245","severity":1,"message":"246","line":7,"column":10,"nodeType":"247","messageId":"248","endLine":7,"endColumn":14},{"ruleId":"245","severity":1,"message":"279","line":2,"column":8,"nodeType":"247","messageId":"248","endLine":2,"endColumn":17},{"ruleId":"245","severity":1,"message":"262","line":29,"column":8,"nodeType":"247","messageId":"248","endLine":29,"endColumn":12},{"ruleId":"245","severity":1,"message":"280","line":7,"column":18,"nodeType":"247","messageId":"248","endLine":7,"endColumn":28},{"ruleId":"245","severity":1,"message":"246","line":13,"column":8,"nodeType":"247","messageId":"248","endLine":13,"endColumn":12},{"ruleId":"245","severity":1,"message":"250","line":14,"column":8,"nodeType":"247","messageId":"248","endLine":14,"endColumn":24},{"ruleId":"256","severity":1,"message":"281","line":232,"column":6,"nodeType":"258","endLine":232,"endColumn":8,"suggestions":"282"},{"ruleId":"256","severity":1,"message":"283","line":239,"column":6,"nodeType":"258","endLine":239,"endColumn":21,"suggestions":"284"},{"ruleId":"245","severity":1,"message":"262","line":22,"column":8,"nodeType":"247","messageId":"248","endLine":22,"endColumn":12},{"ruleId":"245","severity":1,"message":"285","line":22,"column":10,"nodeType":"247","messageId":"248","endLine":22,"endColumn":26},{"ruleId":"245","severity":1,"message":"286","line":173,"column":7,"nodeType":"247","messageId":"248","endLine":173,"endColumn":18},{"ruleId":"256","severity":1,"message":"287","line":31,"column":6,"nodeType":"258","endLine":31,"endColumn":14,"suggestions":"288"},{"ruleId":"270","severity":1,"message":"271","line":33,"column":5,"nodeType":"272","endLine":37,"endColumn":7},"no-native-reassign",["289"],"no-negated-in-lhs",["290"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'CircularProgress' is defined but never used.","'exchangeFormat' is defined but never used.",["289"],["290"],["289"],["290"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'setCurrency'. Either include it or remove the dependency array. If 'setCurrency' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["291"],["289"],["290"],"'clsx' is defined but never used.","React Hook React.useLayoutEffect has an unnecessary dependency: 'ref.current'. Either exclude it or remove the dependency array. Mutable values like 'ref.current' aren't valid dependencies because mutating them doesn't re-render the component.",["292"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'status' is defined but never used.","'onPrepaidChange' is assigned a value but never used.","'adornments' is assigned a value but never used.","'bindActionCreators' is defined but never used.","'PropTypes' is defined but never used.","'RouterLink' is defined but never used.","React Hook React.useEffect has missing dependencies: 'getBasketItemsAction' and 'getBasketItemsStatus'. Either include them or remove the dependency array. If 'getBasketItemsAction' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["293"],"React Hook React.useEffect has a missing dependency: 'afterScanSuccess'. Either include it or remove the dependency array.",["294"],"'defaultScanDelay' is defined but never used.","'caughtError' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["295"],"no-global-assign","no-unsafe-negation",{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},{"desc":"304","fix":"305"},"Update the dependencies array to be: [qrLocation, setCurrency]",{"range":"306","text":"307"},"Update the dependencies array to be: []",{"range":"308","text":"309"},"Update the dependencies array to be: [getBasketItemsAction, getBasketItemsStatus]",{"range":"310","text":"311"},"Update the dependencies array to be: [afterScanSuccess, isScanSuccess]",{"range":"312","text":"313"},"Update the dependencies array to be: [QRCode, token]",{"range":"314","text":"315"},[1622,1634],"[qrLocation, setCurrency]",[269,282],"[]",[6408,6410],"[getBasketItemsAction, getBasketItemsStatus]",[6522,6537],"[afterScanSuccess, isScanSuccess]",[926,934],"[QRCode, token]"]